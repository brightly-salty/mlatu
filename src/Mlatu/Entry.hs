-- |
-- Module      : Mlatu.Entry
-- Description : Dictionary entries
-- Copyright   : (c) Caden Haustin, 2021
-- License     : MIT
-- Maintainer  : mlatu@brightlysalty.33mail.com
-- Stability   : experimental
-- Portability : GHC
module Mlatu.Entry
  ( Entry (..),
  )
where

import Mlatu.DataConstructor (DataConstructor)
import Mlatu.DataConstructor qualified as DataConstructor
import Mlatu.Entry.Category (Category)
import Mlatu.Entry.Merge (Merge)
import Mlatu.Entry.Parameter (Parameter)
import Mlatu.Entry.Parent (Parent)
import Mlatu.Name (Qualified)
import Mlatu.Origin (Origin)
import Mlatu.Pretty qualified as Pretty
import Mlatu.Signature (Constraint, Signature)
import Mlatu.Term (Term)
import Mlatu.Type (Type)
import Relude hiding (Constraint, Type)
import Text.PrettyPrint qualified as Pretty
import Text.PrettyPrint.HughesPJClass (Pretty (..))

-- | An entry in the dictionary.
--
-- FIXME: This could use significant cleaning up. We could possibly make each
-- constructor into a separate 'HashMap' in the 'Dictionary'.
data Entry
  = -- | A word definition. If the implementation is 'Nothing', this is a
    -- declaration: it can be used for type checking and name resolution, but not
    -- compilation. If the parent is a trait, this is a trait instance, with
    -- instance mangling. If the parent is a type, this is a constructor.
    -- Definitions without signatures are disallowed by the surface syntax, but
    -- they are generated for lifted lambdas, as those have already been
    -- typechecked by the time quotations are flattened into top-level definitions
    -- ("Mlatu.Desugar.Quotations").
    Word
      !Category
      !Merge
      !Origin
      !(Maybe Parent)
      !(Maybe Signature)
      !(Maybe (Term Type))
  | -- | Untyped metadata from @about@ blocks. Used internally for operator
    -- precedence and associativity.
    Metadata !Origin !(Term ())
  | -- | A link to another entry in the dictionary. Generated by imports and
    -- synonym declarations.
    Synonym !Origin !Qualified
  | -- | A trait to which other entries can link.
    Trait !Origin !Signature
  | -- | A data type with some generic parameters.
    Type !Origin ![Parameter] ![Constraint] ![DataConstructor]
  | -- | An instantiation of a data type, with the given size.
    InstantiatedType !Origin !Int
  deriving (Show)

instance Pretty Entry where
  pPrint (Word category _ origin mParent mSignature _) =
    Pretty.vcat
      [ pPrint category,
        Pretty.hsep ["defined at", pPrint origin],
        case mSignature of
          Just signature ->
            Pretty.hsep
              ["with signature", Pretty.quote signature]
          Nothing -> "with no signature",
        case mParent of
          Just parent ->
            Pretty.hsep
              ["with parent", pPrint parent]
          Nothing -> "with no parent"
      ]
  pPrint (Metadata origin term) =
    Pretty.vcat
      [ "metadata",
        Pretty.hsep ["defined at", pPrint origin],
        Pretty.hsep ["with contents", pPrint term]
      ]
  pPrint (Synonym origin name) =
    Pretty.vcat
      [ "synonym",
        Pretty.hsep ["defined at", pPrint origin],
        Pretty.hsep ["standing for", pPrint name]
      ]
  pPrint (Trait origin signature) =
    Pretty.vcat
      [ "trait",
        Pretty.hsep ["defined at", pPrint origin],
        Pretty.hsep ["with signature", pPrint signature]
      ]
  pPrint (Type origin parameters constraints ctors) =
    Pretty.vcat
      [ "type",
        Pretty.hsep ["defined at", pPrint origin],
        Pretty.hcat $
          "with parameters [" :
          intersperse ", " (map pPrint parameters)
            ++ ["] constrained so that "]
            ++ intersperse "," (map pPrint constraints),
        Pretty.vcat
          [ "and data constructors",
            Pretty.nest 4 $
              Pretty.vcat $
                map constructor ctors
          ]
      ]
    where
      constructor ctor =
        Pretty.hcat
          [ pPrint $ DataConstructor.name ctor,
            " with fields (",
            Pretty.hcat $
              intersperse ", " $
                map pPrint $ DataConstructor.fields ctor,
            ")"
          ]
  pPrint (InstantiatedType origin size) =
    Pretty.vcat
      [ "instantiated type",
        Pretty.hsep ["defined at", pPrint origin],
        Pretty.hcat ["with size", pPrint size]
      ]
