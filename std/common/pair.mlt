type pair[a, b] { case mk-pair (a, b) }

define first (∀ a b . b a pair -> a) { unpair drop }

define flip (∀ a b . b a pair -> a b pair) { unpair swap mk-pair }

define map-pair (∀ a b c d . b a pair, (a -> c), (b -> d) -> d c pair) {
  -> p, f, g;
  p unpair -> a, b;
  (a f call) (b g call) mk-pair
}

define second (∀ a b . b a pair -> b) { unpair swap drop }

define unpair (∀ a b . b a pair -> a, b) { match case mk-pair {} }
