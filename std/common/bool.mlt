trait & [T] (T, T -> T)

trait && [T] (T, (-> T) -> T)

trait --> [T] (T, T -> T)

trait not [T] (T -> T)

trait | [T] (T, T -> T)

trait || [T] (T, (-> T) -> T)

trait ~ [A] (A, A -> A)


type Bool {   case false case true }

instance & (Int, Int -> Int) { _::mlatu::and_int64 }

instance & (Bool, Bool -> Bool) { swap (not) if { drop false } else {} }

instance && (Bool, (-> Bool) -> Bool) { swap if { call } else { drop false } }

instance --> (Bool, Bool -> Bool) { swap (not) if { drop true } else {} }

instance --> (Int, Int -> Int) { swap not (|) }

instance not (Bool -> Bool) { if { false } else { true } }

instance not (Int -> Int) { _::mlatu::not_int64 }

instance | (Int, Int -> Int) { _::mlatu::or_int64 }

instance | (Bool, Bool -> Bool) { swap if { drop true } else {} }

instance || (Bool, (-> Bool) -> Bool) { swap if { drop true } else { call } }

instance ~ (Int, Int -> Int) { _::mlatu::xor_int64 }

instance ~ (Bool, Bool -> Bool) { swap if { not } else {} }

define ---> (Bool, (-> Bool) -> Bool) {
  swap (not)
  if { drop true }
  else { call }
}

define until [R...] (R..., (R... -> R..., Bool) -> R...) {
  -> f;
  if (f call not) { f until }
  else {}
}

define while [R...] (R..., (R... -> R..., Bool) -> R...) {
  -> f;
  if (f call) { f while }
  else {}
}

about ~ {
  operator {
    5
  }
}

about & {
  operator {
    right 3
  }
}

about && {
  operator {
    right 3
  }
}

about | {
  operator {
    right 2
  }
}

about || {
  operator {
    right 2
  }
}

about --> {
  operator {
    right 1
  }
}

about ---> {
  operator {
    right 1
  }
}
