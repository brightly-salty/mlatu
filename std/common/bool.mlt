trait & (∀ t . t, t -> t)

trait && (∀ t . t, (-> t) -> t)

trait not (∀ t . t -> t)

trait | (∀ t . t, t -> t)

trait || (∀ t . t, (-> t) -> t)

trait ~ (∀ a . a, a -> a)


type bool {   case false case true }

instance & (int, int -> int) { mlatu::and-int64 }

instance & (bool, bool -> bool) { swap (not) if { drop false } else {} }

instance && (bool, (-> bool) -> bool) { swap if { call } else { drop false } }

instance not (bool -> bool) { if { false } else { true } }

instance not (int -> int) { mlatu::not-int64 }

instance | (int, int -> int) { mlatu::or-int64 }

instance | (bool, bool -> bool) { swap if { drop true } else {} }

instance || (bool, (-> bool) -> bool) { swap if { drop true } else { call } }

instance ~ (int, int -> int) { mlatu::xor-int64 }

instance ~ (bool, bool -> bool) { swap if { not } else {} }

define until (∀ r... . r..., (r... -> r..., bool) -> r...) {
  -> f;
  if (f call not) { f until }
  else {}
}

define while (∀ r... . r..., (r... -> r..., bool) -> r...) {
  -> f;
  if (f call) { f while }
  else {}
}

about ~ {
  operator {
    5
  }
}

about & {
  operator {
    right 3
  }
}

about && {
  operator {
    right 3
  }
}

about | {
  operator {
    right 2
  }
}

about || {
  operator {
    right 2
  }
}
