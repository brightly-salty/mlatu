define bi [A, B, C] (A, (A -> B), (A -> C) -> B, C) {
  => x, f, g;
  (x f call) (x g call)
}

define bi2 [A, B, C, D] (A, B, (A, B -> C), (A, B -> D) -> C, D) {
  => x, y, f, g;
  (x y f call) (x y g call)
}

define bi3 [A, B, C, D, E, F] (A, B, C, (A, B, C -> D), (A, B, C -> E), (A, B, C -> F) -> D, E, F) {
  => x, y, z, f, g, h;
  (x y z f call) (x y z g call) (x y z h call)
}

define compose [R..., S..., T...] ((R... -> S...), (S... -> T...) -> (R... -> T...)) {
  => f, g;
  { f call g call }
}

define curry [R..., S..., T] (T, (R..., T -> S...) -> (R... -> S...)) {
  => x, f;
  { x f call }
}

define curry2 [R..., S..., A, B] (A, B, (R..., A, B -> S...) -> (R... -> S...)) {
  => x, y, f;
  { x y f call }
}

define dip [R..., S..., T] (R..., T, (R... -> S...) -> S..., T) {
  => x, f;
  f call x
}

define drop2 [A, B] (A, B ->) { drop drop }

define drop3 [A, B, C] (A, B, C ->) { drop drop drop }

define dup [T] (T -> T, T) { => x; x x }

define dup2 [A, B] (A, B -> A, B, A, B) { => x, y; x y x y }

define dup3 [A, B, C] (A, B, C -> A, B, C, A, B, C) { => x, y, z; x y z x y z }

define fix [R..., S...] (R..., (R..., (R... -> S...) -> S...) -> S...) {
  => f;
  { f fix } f call
}

define function [T] (T -> (-> T)) { => x; { x } }

define id [R...] (R... -> R...) {}

define keep [R..., S..., T] (R..., T, (R..., T -> S...) -> S..., T) {
  => x, f;
  x f call x
}

define keep2 [R..., S..., A, B] (R..., A, B, (R..., A, B -> S...) -> S..., A, B) {
  => x, y, f;
  x y f call x y
}

define keep3 [R..., S..., A, B, C] (R..., A, B, C, (R..., A, B, C -> S...) -> S..., A, B, C) {
  => x, y, z, f;
  x y z f call x y z
}

define nip [A, B] (A, B -> B) { => x; drop x }

define nip2 [A, B, C] (A, B, C -> C) { => x; drop2 x }

define over [A, B] (A, B -> A, B, A) { => x, y; x y x }

define over2 [A, B, C] (A, B, C -> A, B, C, A, B) { => x, y, z; x y z x y }

define pick [A, B, C] (A, B, C -> A, B, C, A) { => x, y, z; x y z x }

define swapped [R..., S..., A, B] ((R..., A, B -> S...) -> (R..., B, A -> S...)) {
  \swap swap compose
}

define tri [A, B, C, D] (A, (A -> B), (A -> C), (A -> D) -> B, C, D) {
  => x, f, g, h;
  (x f call) (x g call) (x h call)
}

define tri2 [A, B, C, D, E] (A, B, (A, B -> C), (A, B -> D), (A, B -> E) -> C, D, E) {
  => x, y, f, g, h;
  (x y f call) (x y g call) (x y h call)
}

define tri3 [A, B, C, D, E, F] (A, B, C, (A, B, C -> D), (A, B, C -> E), (A, B, C -> F) -> D, E, F) {
  => x, y, z, f, g, h;
  (x y z f call) (x y z g call) (x y z h call)
}

about fix {
  docs {
    """
    Computes the least fixed point of a function. Can be used to write recursive
    definitions without explicit recursion, e.g.:

        // Compute the factorial of 5.
        5 {
          -> n, rec;
          if (n <= 0):
            1
          else:
            (n - 1) rec call * n
        } fix
    """
  }
}

about curry {
  docs {
    "Partially applies the topmost argument of a function."
  }
}
