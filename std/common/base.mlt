define bi (∀ a b c . a, (a -> b), (a -> c) -> b, c) {
  -> x, f, g;
  (x f call) (x g call)
}

define bi2 (∀ a b c d . a, b, (a, b -> c), (a, b -> d) -> c, d) {
  -> x, y, f, g;
  (x y f call) (x y g call)
}

define bi3 (∀ a b c d e f . a, b, c, (a, b, c -> d), (a, b, c -> e), (a, b, c -> f) -> d, e, f) {
  -> x, y, z, f, g, h;
  (x y z f call) (x y z g call) (x y z h call)
}

define compose (∀ r... s... t... . (r... -> s...), (s... -> t...) -> (r... -> t...)) {
  -> f, g;
  { f call g call }
}

define curry (∀ r... s... t . t, (r..., t -> s...) -> (r... -> s...)) {
  -> x, f;
  { x f call }
}

define curry2 (∀ r... s... a b . a, b, (r..., a, b -> s...) -> (r... -> s...)) {
  -> x, y, f;
  { x y f call }
}

define dip (∀ r... s... t . r..., t, (r... -> s...) -> s..., t) {
  -> x, f;
  f call x
}

define drop2 (∀ a b . a, b ->) { drop drop }

define drop3 (∀ a b c . a, b, c ->) { drop drop drop }

define dup (∀ t . t -> t, t) { -> x; x x }

define dup2 (∀ a b . a, b -> a, b, a, b) { -> x, y; x y x y }

define dup3 (∀ a b c . a, b, c -> a, b, c, a, b, c) { -> x, y, z; x y z x y z }

define fix (∀ r... s... . r..., (r..., (r... -> s...) -> s...) -> s...) {
  -> f;
  { f fix } f call
}

define function (∀ t . t -> (-> t)) { -> x; { x } }

define id (∀ r... . r... -> r...) {}

define keep (∀ r... s... t . r..., t, (r..., t -> s...) -> s..., t) {
  -> x, f;
  x f call x
}

define keep2 (∀ r... s... a b . r..., a, b, (r..., a, b -> s...) -> s..., a, b) {
  -> x, y, f;
  x y f call x y
}

define keep3 (∀ r... s... a b c . r..., a, b, c, (r..., a, b, c -> s...) -> s..., a, b, c) {
  -> x, y, z, f;
  x y z f call x y z
}

define nip (∀ a b . a, b -> b) { -> x; drop x }

define nip2 (∀ a b c . a, b, c -> c) { -> x; drop2 x }

define over (∀ a b . a, b -> a, b, a) { -> x, y; x y x }

define over2 (∀ a b c . a, b, c -> a, b, c, a, b) { -> x, y, z; x y z x y }

define pick (∀ a b c . a, b, c -> a, b, c, a) { -> x, y, z; x y z x }

define swapped (∀ r... s... a b . (r..., a, b -> s...) -> (r..., b, a -> s...)) {
  \swap swap compose
}

define tri (∀ a b c d . a, (a -> b), (a -> c), (a -> d) -> b, c, d) {
  -> x, f, g, h;
  (x f call) (x g call) (x h call)
}

define tri2 (∀ a b c d e . a, b, (a, b -> c), (a, b -> d), (a, b -> e) -> c, d, e) {
  -> x, y, f, g, h;
  (x y f call) (x y g call) (x y h call)
}

define tri3 (∀ a b c d e f . a, b, c, (a, b, c -> d), (a, b, c -> e), (a, b, c -> f) -> d, e, f) {
  -> x, y, z, f, g, h;
  (x y z f call) (x y z g call) (x y z h call)
}
