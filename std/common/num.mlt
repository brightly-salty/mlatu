vocab mlatu {
  intrinsic acos-float64 (double -> double)
  intrinsic acosh-float64 (double -> double)
  intrinsic add-float64 (double, double -> double)
  intrinsic add-int64 (int, int -> int)
  intrinsic and-int64 (int, int -> int)
  intrinsic asin-float64 (double -> double)
  intrinsic asinh-float64 (double -> double)
  intrinsic atan2-float64 (double, double -> double)
  intrinsic atan-float64 (double -> double)
  intrinsic atanh-float64 (double -> double)
  intrinsic ceil-float64 (double -> double)
  intrinsic cos-float64 (double -> double)
  intrinsic cosh-float64 (double -> double)
  intrinsic div-float64 (double, double -> double)
  intrinsic div-int64 (int, int -> int)
  intrinsic eq-char (char, char -> bool)
  intrinsic eq-float64 (double, double -> bool)
  intrinsic eq-int64 (int, int -> bool)
  intrinsic exp-float64 (double -> double)
  intrinsic floor-float64 (double -> double)
  intrinsic gt-char (char, char -> bool)
  intrinsic gt-float64 (double, double -> bool)
  intrinsic gt-int64 (int, int -> bool)
  intrinsic log-float64 (double -> double)
  intrinsic mod-float64 (double, double -> double)
  intrinsic mod-int64 (int, int -> int)
  intrinsic mul-float64 (double, double -> double)
  intrinsic mul-int64 (int, int -> int)
  intrinsic neg-int64 (int -> int)
  intrinsic not-int64 (int -> int)
  intrinsic or-int64 (int, int -> int)
  intrinsic round-float64 (double -> double)
  intrinsic sin-float64 (double -> double)
  intrinsic sinh-float64 (double -> double)
  intrinsic sqrt-float64 (double -> double)
  intrinsic sub-float64 (double, double -> double)
  intrinsic sub-int64 (int, int -> int)
  intrinsic tan-float64 (double -> double)
  intrinsic tanh-float64 (double -> double)
  intrinsic trunc-float64 (double -> double)
  intrinsic xor-int64 (int, int -> int)
}

trait % (∀ t . t, t -> t)

trait * (∀ t . t, t -> t)

trait + (∀ t . t, t -> t)

trait - (∀ t . t, t -> t)

trait / (∀ t . t, t -> t)

trait < (∀ t . t, t -> bool)

trait <= (∀ t . t, t -> bool)

trait <> (∀ t . t, t -> bool)

trait = (∀ t . t, t -> bool)

trait > (∀ t . t, t -> bool)

trait >= (∀ t . t, t -> bool)

trait neg (∀ t . t -> t)

trait zero (∀ t . -> t)


type char {}

type double {}

type int {}

instance % (double, double -> double) { mlatu::mod-float64 }

instance % (int, int -> int) { mlatu::mod-int64 }

instance * (double, double -> double) { mlatu::mul-float64 }

instance * (int, int -> int) { mlatu::mul-int64 }

instance + (double, double -> double) { mlatu::add-float64 }

instance + (int, int -> int) { mlatu::add-int64 }

instance - (double, double -> double) { mlatu::sub-float64 }

instance - (int, int -> int) { mlatu::sub-int64 }

instance / (double, double -> double) { mlatu::div-float64 }

instance / (int, int -> int) { mlatu::div-int64 }

instance < (int, int -> bool) { swap (>) }

instance < (char, char -> bool) { swap (>) }

instance < (double, double -> bool) { swap (>) }

instance < (bool, bool -> bool) { swap not (&) }

instance <= (int, int -> bool) { (>) not }

instance <= (char, char -> bool) { (>) not }

instance <= (double, double -> bool) { (>) not }

instance <= (bool, bool -> bool) { (>) not }

instance <> (int, int -> bool) { (=) not }

instance <> (char, char -> bool) { (=) not }

instance <> (double, double -> bool) { (=) not }

instance <> (bool, bool -> bool) { (=) not }

instance = (bool, bool -> bool) { if {} else { not } }

instance = (char, char -> bool) { mlatu::eq-char }

instance = (double, double -> bool) { mlatu::eq-float64 }

instance = (int, int -> bool) { mlatu::eq-int64 }

instance > (char, char -> bool) { mlatu::gt-char }

instance > (double, double -> bool) { mlatu::gt-float64 }

instance > (int, int -> bool) { mlatu::gt-int64 }

instance > (bool, bool -> bool) { (&) not }

instance >= (int, int -> bool) { (<) not }

instance >= (char, char -> bool) { (<) not }

instance >= (double, double -> bool) { (<) not }

instance >= (bool, bool -> bool) { (<) not }

instance neg (double -> double) { 0.0 - }

instance neg (int -> int) { 0 - }

instance zero (-> double) { 0.0 }

instance zero (-> int) { 0 }

define abs (∀ t . t -> t) { dup if (zero <) { neg } else {} }

define acos (double -> double) { mlatu::acos-float64 }

define acosh (double -> double) { mlatu::acosh-float64 }

define asin (double -> double) { mlatu::asin-float64 }

define asinh (double -> double) { mlatu::asinh-float64 }

define atan (double -> double) { mlatu::atan-float64 }

define atan2 (double, double -> double) { mlatu::atan2-float64 }

define atanh (double -> double) { mlatu::atanh-float64 }

define ceil (double -> double) { mlatu::ceil-float64 }

define cos (double -> double) { mlatu::cos-float64 }

define cosh (double -> double) { mlatu::cosh-float64 }

define div-mod (∀ t . t, t -> t, t) { -> x, y; (x y /) (x y %) }

define exp (double -> double) { mlatu::exp-float64 }

define floor (double -> double) { mlatu::floor-float64 }

define log (double -> double) { mlatu::log-float64 }

define max (∀ t . t, t -> t) { -> x, y; if (x y >) { x } else { y } }

define min (∀ t . t, t -> t) { -> x, y; if (x y <) { x } else { y } }

define pi (-> double) { 3.141592653589793 }

define round (double -> double) { mlatu::round-float64 }

define sin (double -> double) { mlatu::sin-float64 }

define sinh (double -> double) { mlatu::sinh-float64 }

define sqrt (double -> double) { mlatu::sqrt-float64 }

define tan (double -> double) { mlatu::tan-float64 }

define tanh (double -> double) { mlatu::tanh-float64 }

define trunc (double -> double) { mlatu::trunc-float64 }

about + {
  docs {
    "Operation of an additive monoid with `zero` as the identity."
  }
  operator {
    left 6
  }
}

about < {
  operator {
    4
  }
}

about > {
  operator {
    4
  }
}

about <= {
  operator {
    4
  }
}

about >= {
  operator {
    4
  }
}

about = {
  operator {
    4
  }
}

about <> {
  operator {
    4
  }
}

about - {
  operator {
    left 6
  }
}

about * {
  operator {
    left 7
  }
}

about / {
  operator {
    left 7
  }
}

about % {
  operator {
    left 7
  }
}

about char {
  alignment {
    4
  }
  size {
    4
  }
}

about int {
  alignment {
    8
  }
  size {
    8
  }
}

about double {
  alignment {
    8
  }
  size {
    8
  }
}
