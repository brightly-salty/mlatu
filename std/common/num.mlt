vocab mlatu {
  intrinsic acos-float (float -> float)
  intrinsic acosh-float (float -> float)
  intrinsic add-float (float, float -> float)
  intrinsic add-int (int, int -> int)
  intrinsic and-int (int, int -> int)
  intrinsic asin-float (float -> float)
  intrinsic asinh-float (float -> float)
  intrinsic atan2-float (float, float -> float)
  intrinsic atan-float (float -> float)
  intrinsic atanh-float (float -> float)
  intrinsic ceil-float (float -> float)
  intrinsic cos-float (float -> float)
  intrinsic cosh-float (float -> float)
  intrinsic div-float (float, float -> float)
  intrinsic div-int (int, int -> int)
  intrinsic eq-char (char, char -> bool)
  intrinsic eq-float (float, float -> bool)
  intrinsic eq-int (int, int -> bool)
  intrinsic exp-float (float -> float)
  intrinsic floor-float (float -> float)
  intrinsic gt-char (char, char -> bool)
  intrinsic gt-float (float, float -> bool)
  intrinsic gt-int (int, int -> bool)
  intrinsic log-float (float -> float)
  intrinsic mod-float (float, float -> float)
  intrinsic mod-int (int, int -> int)
  intrinsic mul-float (float, float -> float)
  intrinsic mul-int (int, int -> int)
  intrinsic neg-int (int -> int)
  intrinsic not-int (int -> int)
  intrinsic or-int (int, int -> int)
  intrinsic round-float (float -> float)
  intrinsic sin-float (float -> float)
  intrinsic sinh-float (float -> float)
  intrinsic sqrt-float (float -> float)
  intrinsic sub-float (float, float -> float)
  intrinsic sub-int (int, int -> int)
  intrinsic tan-float (float -> float)
  intrinsic tanh-float (float -> float)
  intrinsic trunc-float (float -> float)
  intrinsic xor-int (int, int -> int)
}

trait % (∀ t . t, t -> t)

trait * (∀ t . t, t -> t)

trait + (∀ t . t, t -> t)

trait - (∀ t . t, t -> t)

trait / (∀ t . t, t -> t)

trait < (∀ t . t, t -> bool)

trait <= (∀ t . t, t -> bool)

trait <> (∀ t . t, t -> bool)

trait = (∀ t! . t!, t! -> bool)

trait > (∀ t . t, t -> bool)

trait >= (∀ t . t, t -> bool)

trait neg (∀ t . t -> t)

trait zero (∀ t . -> t)


type char! {}

type float! {}

type int! {}

instance % (float, float -> float) { mlatu::mod-float }

instance % (int, int -> int) { mlatu::mod-int }

instance * (float, float -> float) { mlatu::mul-float }

instance * (int, int -> int) { mlatu::mul-int }

instance + (float, float -> float) { mlatu::add-float }

instance + (int, int -> int) { mlatu::add-int }

instance - (float, float -> float) { mlatu::sub-float }

instance - (int, int -> int) { mlatu::sub-int }

instance / (float, float -> float) { mlatu::div-float }

instance / (int, int -> int) { mlatu::div-int }

instance < (int, int -> bool) { swap (>) }

instance < (char, char -> bool) { swap (>) }

instance < (float, float -> bool) { swap (>) }

instance < (bool, bool -> bool) { swap not (&) }

instance <= (int, int -> bool) { (>) not }

instance <= (char, char -> bool) { (>) not }

instance <= (float, float -> bool) { (>) not }

instance <= (bool, bool -> bool) { (>) not }

instance <> (int, int -> bool) { (=) not }

instance <> (char, char -> bool) { (=) not }

instance <> (float, float -> bool) { (=) not }

instance <> (bool, bool -> bool) { (=) not }

instance = (bool, bool -> bool) { if {} else { not } }

instance = (char, char -> bool) { mlatu::eq-char }

instance = (float, float -> bool) { mlatu::eq-float }

instance = (int, int -> bool) { mlatu::eq-int }

instance > (char, char -> bool) { mlatu::gt-char }

instance > (float, float -> bool) { mlatu::gt-float }

instance > (int, int -> bool) { mlatu::gt-int }

instance > (bool, bool -> bool) { (&) not }

instance >= (int, int -> bool) { (<) not }

instance >= (char, char -> bool) { (<) not }

instance >= (float, float -> bool) { (<) not }

instance >= (bool, bool -> bool) { (<) not }

instance neg (float -> float) { 0.0 - }

instance neg (int -> int) { 0 - }

instance zero (-> float) { 0.0 }

instance zero (-> int) { 0 }

define abs (∀ t . t -> t) { dup if (zero <) { neg } else {} }

define acos (float -> float) { mlatu::acos-float }

define acosh (float -> float) { mlatu::acosh-float }

define asin (float -> float) { mlatu::asin-float }

define asinh (float -> float) { mlatu::asinh-float }

define atan (float -> float) { mlatu::atan-float }

define atan2 (float, float -> float) { mlatu::atan2-float }

define atanh (float -> float) { mlatu::atanh-float }

define ceil (float -> float) { mlatu::ceil-float }

define cos (float -> float) { mlatu::cos-float }

define cosh (float -> float) { mlatu::cosh-float }

define div-mod (∀ t . t, t -> t, t) { -> x, y; (x y /) (x y %) }

define exp (float -> float) { mlatu::exp-float }

define floor (float -> float) { mlatu::floor-float }

define log (float -> float) { mlatu::log-float }

define max (∀ t . t, t -> t) { -> x, y; if (x y >) { x } else { y } }

define min (∀ t . t, t -> t) { -> x, y; if (x y <) { x } else { y } }

define pi (-> float) { 3.141592653589793 }

define round (float -> float) { mlatu::round-float }

define sin (float -> float) { mlatu::sin-float }

define sinh (float -> float) { mlatu::sinh-float }

define sqrt (float -> float) { mlatu::sqrt-float }

define tan (float -> float) { mlatu::tan-float }

define tanh (float -> float) { mlatu::tanh-float }

define trunc (float -> float) { mlatu::trunc-float }

about + {
  docs {
    "Operation of an additive monoid with `zero` as the identity."
  }
  operator {
    left 6
  }
}

about < {
  operator {
    4
  }
}

about > {
  operator {
    4
  }
}

about <= {
  operator {
    4
  }
}

about >= {
  operator {
    4
  }
}

about = {
  operator {
    4
  }
}

about <> {
  operator {
    4
  }
}

about - {
  operator {
    left 6
  }
}

about * {
  operator {
    left 7
  }
}

about / {
  operator {
    left 7
  }
}

about % {
  operator {
    left 7
  }
}

about char {
  alignment {
    4
  }
  size {
    4
  }
}

about int {
  alignment {
    8
  }
  size {
    8
  }
}

about float {
  alignment {
    8
  }
  size {
    8
  }
}
