vocab mlatu {
  intrinsic acos_float64 (Double -> Double)
  intrinsic acosh_float64 (Double -> Double)
  intrinsic add_float64 (Double, Double -> Double)
  intrinsic add_int64 (Int, Int -> Int)
  intrinsic and_int64 (Int, Int -> Int)
  intrinsic asin_float64 (Double -> Double)
  intrinsic asinh_float64 (Double -> Double)
  intrinsic atan2_float64 (Double, Double -> Double)
  intrinsic atan_float64 (Double -> Double)
  intrinsic atanh_float64 (Double -> Double)
  intrinsic ceil_float64 (Double -> Double)
  intrinsic cos_float64 (Double -> Double)
  intrinsic cosh_float64 (Double -> Double)
  intrinsic div_float64 (Double, Double -> Double)
  intrinsic div_int64 (Int, Int -> Int)
  intrinsic eq_char (Char, Char -> Bool)
  intrinsic eq_float64 (Double, Double -> Bool)
  intrinsic eq_int64 (Int, Int -> Bool)
  intrinsic exp_float64 (Double -> Double)
  intrinsic floor_float64 (Double -> Double)
  intrinsic gt_char (Char, Char -> Bool)
  intrinsic gt_float64 (Double, Double -> Bool)
  intrinsic gt_int64 (Int, Int -> Bool)
  intrinsic log_float64 (Double -> Double)
  intrinsic mod_float64 (Double, Double -> Double)
  intrinsic mod_int64 (Int, Int -> Int)
  intrinsic mul_float64 (Double, Double -> Double)
  intrinsic mul_int64 (Int, Int -> Int)
  intrinsic neg_int64 (Int -> Int)
  intrinsic not_int64 (Int -> Int)
  intrinsic or_int64 (Int, Int -> Int)
  intrinsic round_float64 (Double -> Double)
  intrinsic sin_float64 (Double -> Double)
  intrinsic sinh_float64 (Double -> Double)
  intrinsic sqrt_float64 (Double -> Double)
  intrinsic sub_float64 (Double, Double -> Double)
  intrinsic sub_int64 (Int, Int -> Int)
  intrinsic tan_float64 (Double -> Double)
  intrinsic tanh_float64 (Double -> Double)
  intrinsic trunc_float64 (Double -> Double)
  intrinsic xor_int64 (Int, Int -> Int)
}

class Mod[T] { method % (T, T -> T +Fail) }

class Mul[T] { method * (T, T -> T) }

class Add[T] { method + (T, T -> T) }

class Sub[T] { method - (T, T -> T) }

class Div[T] { method / (T, T -> T +Fail) }

class Lt[T] { method < (T, T -> Bool) }

class Le[T] { method <= (T, T -> Bool) }

class Ne[T] { method <> (T, T -> Bool) }

class Eq[T] { method = (T, T -> Bool) }

class Gt[T] { method > (T, T -> Bool) }

class Ge[T] { method >= (T, T -> Bool) }

class Neg[T] { method neg (T -> T) }

class Zero[T] { method zero (-> T) }


type Char {}

type Double {}

type Int {}

instance Mod for Double { define % (Double, Double -> Double +Fail) { _::mlatu::mod_float64 } }

instance Mod for Int { define % (Int, Int -> Int +Fail) { _::mlatu::mod_int64 } }

instance Mul for Double { define * (Double, Double -> Double) { _::mlatu::mul_float64 } }

instance Mul for Int { define * (Int, Int -> Int) { _::mlatu::mul_int64 } }

instance Add for Double { define + (Double, Double -> Double) { _::mlatu::add_float64 } }

instance Add for Int { define + (Int, Int -> Int) { _::mlatu::add_int64 } }

instance Sub for Double { define - (Double, Double -> Double) { _::mlatu::sub_float64 } }

instance Sub for Int { define - (Int, Int -> Int) { _::mlatu::sub_int64 } }

instance Div for Double { define / (Double, Double -> Double +Fail) { _::mlatu::div_float64 } }

instance Div for Int { define / (Int, Int -> Int +Fail) { _::mlatu::div_int64 } }

instance Lt for Int { define < (Int, Int -> Bool) { swap (>) } }

instance Lt for Char { define < (Char, Char -> Bool) { swap (>) } }

instance Lt for Double { define < (Double, Double -> Bool) { swap (>) } }

instance Lt for Bool { define < (Bool, Bool -> Bool) { swap not (&) } }

instance Le for Int { define <= (Int, Int -> Bool) { (>) not } }

instance Le for Char { define <= (Char, Char -> Bool) { (>) not } }

instance Le for Double { define <= (Double, Double -> Bool) { (>) not } }

instance Le for Bool { define <= (Bool, Bool -> Bool) { (>) not } }

instance Ne for Int { define <> (Int, Int -> Bool) { (=) not } }

instance Ne for Char { define <> (Char, Char -> Bool) { (=) not } }

instance Ne for Double { define <> (Double, Double -> Bool) { (=) not } }

instance Ne for Bool { define <> (Bool, Bool -> Bool) { (=) not } }

instance Eq for Bool { define = (Bool, Bool -> Bool) { if {} else { not } } }

instance Eq for Char { define = (Char, Char -> Bool) { _::mlatu::eq_char } }

instance Eq for Double { define = (Double, Double -> Bool) { _::mlatu::eq_float64 } }

instance Eq for Int { define = (Int, Int -> Bool) { _::mlatu::eq_int64 } }

instance Gt for Char { define > (Char, Char -> Bool) { _::mlatu::gt_char } }

instance Gt for Double { define > (Double, Double -> Bool) { _::mlatu::gt_float64 } }

instance Gt for Int { define > (Int, Int -> Bool) { _::mlatu::gt_int64 } }

instance Gt for Bool { define > (Bool, Bool -> Bool) { (&) not } }

instance Gt for Int { define >= (Int, Int -> Bool) { (<) not } }

instance Gt for Char { define >= (Char, Char -> Bool) { (<) not } }

instance Gt for Double { define >= (Double, Double -> Bool) { (<) not } }

instance Gt for Bool { define >= (Bool, Bool -> Bool) { (<) not } }

instance Neg for Double { define neg (Double -> Double) { -> x; 0.0 - x } }

instance Neg for Int { define neg (Int -> Int) { -> x; 0 - x } }

instance Zero for Double { define zero (-> Double) { 0.0 } }

instance Zero for Int { define zero (-> Int) { 0 } }

define abs [T] (T -> T) { -> x; if (x < zero) { x neg } else { x } }

define acos (Double -> Double) { _::mlatu::acos_float64 }

define acosh (Double -> Double) { _::mlatu::acosh_float64 }

define asin (Double -> Double) { _::mlatu::asin_float64 }

define asinh (Double -> Double) { _::mlatu::asinh_float64 }

define atan (Double -> Double) { _::mlatu::atan_float64 }

define atan2 (Double, Double -> Double) { _::mlatu::atan2_float64 }

define atanh (Double -> Double) { _::mlatu::atanh_float64 }

define ceil (Double -> Double) { _::mlatu::ceil_float64 }

define cos (Double -> Double) { _::mlatu::cos_float64 }

define cosh (Double -> Double) { _::mlatu::cosh_float64 }

define div_mod [T] (T, T -> T, T +Fail) { -> x, y; (x / y) (x % y) }

define exp (Double -> Double) { _::mlatu::exp_float64 }

define floor (Double -> Double) { _::mlatu::floor_float64 }

define log (Double -> Double) { _::mlatu::log_float64 }

define max [T] (T, T -> T) { -> x, y; if (x > y) { x } else { y } }

define min [T] (T, T -> T) { -> x, y; if (x < y) { x } else { y } }

define pi (-> Double) { 3.141592653589793 }

define round (Double -> Double) { _::mlatu::round_float64 }

define sin (Double -> Double) { _::mlatu::sin_float64 }

define sinh (Double -> Double) { _::mlatu::sinh_float64 }

define sqrt (Double -> Double) { _::mlatu::sqrt_float64 }

define tan (Double -> Double) { _::mlatu::tan_float64 }

define tanh (Double -> Double) { _::mlatu::tanh_float64 }

define trunc (Double -> Double) { _::mlatu::trunc_float64 }

about + {
  docs {
    "Operation of an additive monoid with `zero` as the identity."
  }
  operator {
    left 6
  }
}

about < {
  operator {
    4
  }
}

about > {
  operator {
    4
  }
}

about <= {
  operator {
    4
  }
}

about >= {
  operator {
    4
  }
}

about = {
  operator {
    4
  }
}

about <> {
  operator {
    4
  }
}

about - {
  operator {
    left 6
  }
}

about * {
  operator {
    left 7
  }
}

about / {
  operator {
    left 7
  }
}

about % {
  operator {
    left 7
  }
}

about Char {
  alignment {
    4
  }
  size {
    4
  }
}

about Int {
  alignment {
    8
  }
  size {
    8
  }
}

about Double {
  alignment {
    8
  }
  size {
    8
  }
}
