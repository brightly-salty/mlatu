data (t) optional { none (-> t optional) | some (t -> t optional) } 

instance cmp (for t. t optional, t optional -> ord) {
  -> a, b;
  match (a)
  | none {
    match (b) | none { equal } | some { drop less }
  }
  | some {
    match (b) | none { drop more } | some { cmp }
  }
}

define from-optional (for t. t optional, t -> t) {
  -> default; match | some {} | _  { default }
}

define from-some (for t. t optional, char list -> t <fail>) {
  -> message; match | some {} | _  { message fail-now }
}

define is-none (for t. t optional -> bool) {
  match | none { true } | _  { false }
}

define is-some (for t. t optional -> bool) {
  match | some { drop true } | _  { false }
}

define lift-optional-2 (for a b c. a optional, b optional, (a, b -> c) -> c optional) {
  -> mx, my, f;
  match (mx)
  | some {
    -> x; match (my) | some -> y { x y f call some } | _  { none }
  }
  | _  {
    none
  }
}

define map-optional (for a b. a optional, (a -> b) -> b optional) {
  -> opt, f; match (opt) | some -> x { x f call some } | _  { none }
}

define optional-fun (for R S a. R, a optional, (R, a -> S), (R -> S) -> S) {
  -> f, g; match | some { f call } | none { g call }
}
