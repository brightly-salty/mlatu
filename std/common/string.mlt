trait read (for t. char list -> t optional)

trait show (for t. t -> char list)


data char {  } 

instance cmp (char, char -> ord) {
  "cmp-char" extern
}

instance read (char list -> nat optional) {
  "read-nat" extern
}

instance read (char list -> char optional) {
  hd
}

instance read (char list -> bool optional) {
  dup
  match ("true" eq)
  | true {
    drop true some
  }
  | false {
    match ("false" eq) | true { false some } | false { none }
  }
}

instance read (char list -> (char list) optional) {
  some
}

instance show (char list -> char list) {}

instance show (for a b. b a either -> char list) {
  match | left { show " left" append } | right { show " right" append }
}

instance show (for t. t optional -> char list) {
  match | some { show " some" append } | none { "none" }
}

instance show (bool -> char list) {
  match | true { "true" } | false { "false" }
}

instance show (nat -> char list) {
  "show-nat" extern
}

instance show (char -> char list) {
  once
}
