trait read (∀ t . string -> t option)

trait show (∀ t . t -> string)


vocab mlatu {
  intrinsic eq-string (string, string -> bool)
  intrinsic gt-string (string, string -> bool)
  intrinsic read-float (string -> float option)
  intrinsic read-int (string -> int option)
  intrinsic show-float (float -> string)
  intrinsic show-int (int -> string)
  intrinsic string-concat (string, string -> string)
  intrinsic string-from-list (char list -> string)
  intrinsic string-to-list (string -> char list)
}

type string! {}

instance + (string, string -> string) { mlatu::string-concat }

instance < (string, string -> bool) { swap (>) }

instance <= (string, string -> bool) { (>) not }

instance <> (string, string -> bool) { (=) not }

instance = (string, string -> bool) { mlatu::eq-string }

instance > (string, string -> bool) { mlatu::gt-string }

instance >= (string, string -> bool) { (<) not }

instance read (string -> bool option) {
  dup
  if ("true" =) { drop true some }
  else { if ("false" =) { false some } else { none } }
}

instance read (string -> float option) { mlatu::read-float }

instance read (string -> int option) { mlatu::read-int }

instance read (string -> char option) {
  chars dup
  if (length 1 =) { hd }
  else { drop none }
}

instance read (string -> string option) { some }

instance show (string -> string) {}

instance show (bool -> string) { if { "true" } else { "false" } }

instance show (∀ a b . b a either -> string) {
  match
  case left { show }
  case right { show }
}

instance show (∀ t . t option -> string) {
  match
  case some -> x { "some " x show + }
  case none { "none" }
}

instance show (float -> string) { mlatu::show-float }

instance show (int -> string) { mlatu::show-int }

instance show (char -> string) { once from-chars }

define chars (string -> char list) { mlatu::string-to-list }

define from-chars (char list -> string) { mlatu::string-from-list }
