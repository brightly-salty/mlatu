/*
class Read[T] { method read (String -> Optional[T]) }

class Show[T] { method show (T -> String) }
*/

vocab mlatu {
  intrinsic eq_string (String, String -> Bool)
  intrinsic gt_string (String, String -> Bool)
  intrinsic read_float64 (String -> Optional Double)
  intrinsic read_int64 (String -> Optional Int)
  intrinsic show_float64 (Double -> String)
  intrinsic show_int64 (Int -> String)
  intrinsic string_concat (String, String -> String)
  intrinsic string_from_list (List Char -> String)
  intrinsic string_to_list (String -> List Char)
}

type String {}

/*
instance Add for String { define + (String, String -> String) { _::mlatu::string_concat } }

instance Lt for String { define < (String, String -> Bool) { swap (>) } }

instance Le for String { define <= (String, String -> Bool) { (>) not } }

instance Ne for String { define <> (String, String -> Bool) { (=) not } }

instance Eq for String { define = (String, String -> Bool) { _::mlatu::eq_string } }

instance Gt for String { define > (String, String -> Bool) { _::mlatu::gt_string } }

instance Ge for String { define >= (String, String -> Bool) { (<) not } }

instance Read for Bool { define read (String -> Optional[Bool]) {
  -> s;
  if (s "true" =) { true some }
  else { if (s "false" =) { false some } else { none } }
}}

instance Read for Double { define read (String -> Optional[Double]) { _::mlatu::read_float64 } }

instance Read for Int { define read (String -> Optional[Int]) { _::mlatu::read_int64 } }

instance Read for Char { define read (String -> Optional[Char]) {
  chars -> cs;
  if (cs length 1 =) { cs head }
  else { none }
}}

instance Read for String { define read (String -> Optional[String]) { some } }

instance Show for String { define show (String -> String) {} }

instance Show for Bool { define show (Bool -> String) { if { "true" } else { "false" } } }

instance Show for Double { define show (Double -> String) { _::mlatu::show_float64 } }

instance Show for Int { define show (Int -> String) { _::mlatu::show_int64 } }

instance Show for Char { define show (Char -> String) { once from_chars } }
*/

define chars (String -> List Char) { _::mlatu::string_to_list }

define from_chars (List Char -> String) { _::mlatu::string_from_list }
