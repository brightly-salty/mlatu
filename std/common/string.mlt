trait read [T] (String -> Optional[T])

trait show [T] (T -> String)


vocab mlatu {
  intrinsic eq_string (String, String -> Bool)
  intrinsic gt_string (String, String -> Bool)
  intrinsic read_float64 (String -> Optional[Double])
  intrinsic read_int64 (String -> Optional[Int])
  intrinsic show_float64 (Double -> String)
  intrinsic show_int64 (Int -> String)
  intrinsic string_concat (String, String -> String)
  intrinsic string_from_list (List[Char] -> String)
  intrinsic string_to_list (String -> List[Char])
}

type String {}

instance + (String, String -> String) { _::mlatu::string_concat }

instance < (String, String -> Bool) { swap (>) }

instance <= (String, String -> Bool) { (>) not }

instance <> (String, String -> Bool) { (=) not }

instance = (String, String -> Bool) { _::mlatu::eq_string }

instance > (String, String -> Bool) { _::mlatu::gt_string }

instance >= (String, String -> Bool) { (<) not }

instance read (String -> Optional[Bool]) {
  dup
  if ("true" =) { drop true some }
  else { if ("false" =) { false some } else { none } }
}

instance read (String -> Optional[Double]) { _::mlatu::read_float64 }

instance read (String -> Optional[Int]) { _::mlatu::read_int64 }

instance read (String -> Optional[Char]) {
  chars dup
  if (length 1 =) { head }
  else { drop none }
}

instance read (String -> Optional[String]) { some }

instance show (String -> String) {}

instance show (Bool -> String) { if { "true" } else { "false" } }

instance show [A, B] (Either[A, B] -> String) {
  match
  case left { show }
  case right { show }
}

instance show [T] (Optional[T] -> String) {
  match
  case some -> x { "some " x show + }
  case none { "none" }
}

instance show (Double -> String) { _::mlatu::show_float64 }

instance show (Int -> String) { _::mlatu::show_int64 }

instance show (Char -> String) { once from_chars }

define chars (String -> List[Char]) { _::mlatu::string_to_list }

define from_chars (List[Char] -> String) { _::mlatu::string_from_list }
