type (t) option {   case none case some (t) }

define from-option (∀ t . t option, t -> t) {
  -> default;
  match
  case some {}
  else { default }
}

define from-some (∀ t . t option, string -> t) {
  -> message;
  match
  case some {}
  else { message fail }
}

define is-none (∀ t . t option -> bool) {
  match
  case none { true }
  else { false }
}

define is-some (∀ t . t option -> bool) {
  match
  case some { drop true }
  else { false }
}

define lift-option-2 (∀ a b c . a option, b option, (a, b -> c) -> c option) {
  -> mx, my, f;
  match (mx)
  case some -> x { match (my) case some -> y { x y f call some } else { none } }
  else { none }
}

define map-option (∀ a b . a option, (a -> b) -> b option) {
  -> opt, f;
  match (opt)
  case some -> x { x f call some }
  else { none }
}

define option-fun (∀ r... s... a . r..., a option, (r..., a -> s...), (r... -> s...) -> s...) {
  -> f, g;
  match
  case some { f call }
  case none { g call }
}
