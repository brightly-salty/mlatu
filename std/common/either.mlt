type Either A B { case left (A) case right (B) }

define either (forall (R S : Stack, A B : Value) . R, Either A B, (R, A -> S), (R, B -> S) -> S) {
  -> f, g;
  match
  case left { f call }
  case right { g call }
}

define from_left (forall A B . Either A B, String -> A) {
  -> message;
  match
  case left {}
  else { message fail }
}

define from_right (forall A B . Either A B, String -> B) {
  -> message;
  match
  case right {}
  else { message fail }
}

define get_left (forall A B . Either A B -> Optional A) {
  match
  case left { some }
  else { none }
}

define get_right (forall A B . Either A B -> Optional B) {
  match
  case right { some }
  else { none }
}

define is_left (forall A B . Either A B -> Bool) {
  match
  case left { -> _; true }
  else { false }
}

define is_right (forall A B . Either A B -> Bool) {
  match
  case right { -> _; true }
  else { false }
}

define map_left (forall A B C . Either A B, (A -> C) -> Either C B) {
  -> f;
  match
  case left { f call left }
  case right { right }
}

define map_right (forall A B C . Either A B, (B -> C) -> Either A C) {
  -> f;
  match
  case right { f call right }
  case left { left }
}
