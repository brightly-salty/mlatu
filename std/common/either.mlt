type (b a) either {   case left (a) case right (b) }

define either-fun (∀ r... s... a b . r..., b a either, (r..., a -> s...), (r..., b -> s...) -> s...) {
  -> f, g;
  match
  case left { f call }
  case right { g call }
}

define from-left (∀ a b . b a either, string -> a) {
  -> message;
  match
  case left {}
  else { message fail }
}

define from-right (∀ a b . b a either, string -> b) {
  -> message;
  match
  case right {}
  else { message fail }
}

define get-left (∀ a b . b a either -> a option) {
  match
  case left { some }
  else { none }
}

define get-right (∀ a b . b a either -> b option) {
  match
  case right { some }
  else { none }
}

define is-left (∀ a b . b a either -> bool) {
  match
  case left { -> -; true }
  else { false }
}

define is-right (∀ a b . b a either -> bool) {
  match
  case right { -> -; true }
  else { false }
}

define map-left (∀ a b c . b a either, (a -> c) -> b c either) {
  -> f;
  match
  case left { f call left }
  case right { right }
}

define map-right (∀ a b c . b a either, (b -> c) -> c a either) {
  -> f;
  match
  case right { f call right }
  case left { left }
}
