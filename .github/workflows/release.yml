name: Release

defaults:
  run:
    shell: bash

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10.4"]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: haskell/actions/setup@v1
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: "3.2"
      - name: Set some Windows-specific things
        if: matrix.os == 'windows-latest'
        env:
          GHC_VER: ${{ matrix.ghc }}
        run: |
          echo "EXE_EXT=.exe" >> $GITHUB_ENV
          echo "GHC_VERSION=$GHC_VER" >> $GITHUB_ENV
      - name: Set some Linux-specific things
        if: matrix.os == 'ubuntu-latest'
        env:
          GHC_VER: ${{ matrix.ghc }}
        run: |
          echo "GHC_VERSION=$GHC_VER" >> $GITHUB_ENV
      - name: Set some macOs-specific things
        if: matrix.os == 'macOS-latest'
        env:
          GHC_VER: ${{ matrix.ghc }}
        run: |
          echo "GHC_VERSION=$GHC_VER" >> $GITHUB_ENV
      - name:
          Build
          # Try building it twice in case of flakey builds on Windows
        run: |
          cabal build exe:mlatu -O2 || \
          cabal build exe:mlatu -O2 -j1
      - name: Compress binary
        id: compress_binary
        run: |
          # We normalize windows+choco ghc version 8.10.2.2
          MLATU_BUILD=$(find dist-newstyle \( -name 'mlatu' -o -name 'mlatu.exe' \) -type f)
          MLATU=mlatu-${{env.GHC_VERSION}}
          mv $MLATU_BUILD $MLATU${{env.EXE_EXT}}
          if [[ "$OSTYPE" == "msys" ]]; then
            7z a $MLATU.zip $MLATU${{env.EXE_EXT}}
            echo ::set-output name=path::$MLATU.zip
            echo ::set-output name=content_type::application/zip
            echo ::set-output name=extension::zip
          else
            gzip --best $MLATU
            echo ::set-output name=path::$MLATU.gz
            echo ::set-output name=content_type::application/gzip
            echo ::set-output name=extension::gz
          fi
      - name: Upload Server Binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.compress_binary.outputs.path }}
          asset_name: mlatu-${{ runner.OS }}${{env.EXE_EXT}}.${{ steps.compress_binary.outputs.extension }}
          asset_content_type: ${{ steps.compress_binary.outputs.content_type }}
