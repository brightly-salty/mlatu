type Int8 {}

about type Int8:
  size: 1
  alignment: 1

type Int16 {}

about type Int16:
  size: 2
  alignment: 2

type Int32 {}

about type Int32:
  size: 4
  alignment: 4

type Int64 {}

about type Int64:
  size: 8
  alignment: 8

type UInt8 {}

about type UInt8:
  size: 1
  alignment: 1

type UInt16 {}

about type UInt16:
  size: 2
  alignment: 2

type UInt32 {}

about type UInt32:
  size: 4
  alignment: 4

type UInt64 {}

about type UInt64:
  size: 8
  alignment: 8

type Char {}

about type Char:
  size: 4
  alignment: 4

type Float32 {}

about type Float32:
  size: 4
  alignment: 4

type Float64 {}

about type Float64:
  size: 8
  alignment: 8

vocab mlatu {

  // Signed integer arithmetic.

  intrinsic neg_int8 (Int8 -> Int8)
  intrinsic add_int8 (Int8, Int8 -> Int8)
  intrinsic sub_int8 (Int8, Int8 -> Int8)
  intrinsic mul_int8 (Int8, Int8 -> Int8)
  intrinsic div_int8 (Int8, Int8 -> Int8)
  intrinsic mod_int8 (Int8, Int8 -> Int8)

  intrinsic neg_int16 (Int16 -> Int16)
  intrinsic add_int16 (Int16, Int16 -> Int16)
  intrinsic sub_int16 (Int16, Int16 -> Int16)
  intrinsic mul_int16 (Int16, Int16 -> Int16)
  intrinsic div_int16 (Int16, Int16 -> Int16)
  intrinsic mod_int16 (Int16, Int16 -> Int16)

  intrinsic neg_int32 (Int32 -> Int32)
  intrinsic add_int32 (Int32, Int32 -> Int32)
  intrinsic sub_int32 (Int32, Int32 -> Int32)
  intrinsic mul_int32 (Int32, Int32 -> Int32)
  intrinsic div_int32 (Int32, Int32 -> Int32)
  intrinsic mod_int32 (Int32, Int32 -> Int32)

  intrinsic neg_int64 (Int64 -> Int64)
  intrinsic add_int64 (Int64, Int64 -> Int64)
  intrinsic sub_int64 (Int64, Int64 -> Int64)
  intrinsic mul_int64 (Int64, Int64 -> Int64)
  intrinsic div_int64 (Int64, Int64 -> Int64)
  intrinsic mod_int64 (Int64, Int64 -> Int64)

  // Signed integer bitwise operations.

  intrinsic not_int8 (Int8 -> Int8)
  intrinsic or_int8  (Int8, Int8 -> Int8)
  intrinsic and_int8 (Int8, Int8 -> Int8)
  intrinsic xor_int8 (Int8, Int8 -> Int8)
  intrinsic shl_int8 (Int8, Int32 -> Int8)
  intrinsic rol_int8 (Int8, Int32 -> Int8)

  intrinsic not_int16 (Int16 -> Int16)
  intrinsic or_int16  (Int16, Int16 -> Int16)
  intrinsic and_int16 (Int16, Int16 -> Int16)
  intrinsic xor_int16 (Int16, Int16 -> Int16)
  intrinsic shl_int16 (Int16, Int32 -> Int16)
  intrinsic rol_int16 (Int16, Int32 -> Int16)

  intrinsic not_int32 (Int32 -> Int32)
  intrinsic or_int32  (Int32, Int32 -> Int32)
  intrinsic and_int32 (Int32, Int32 -> Int32)
  intrinsic xor_int32 (Int32, Int32 -> Int32)
  intrinsic shl_int32 (Int32, Int32 -> Int32)
  intrinsic rol_int32 (Int32, Int32 -> Int32)

  intrinsic not_int64 (Int64 -> Int64)
  intrinsic or_int64  (Int64, Int64 -> Int64)
  intrinsic and_int64 (Int64, Int64 -> Int64)
  intrinsic xor_int64 (Int64, Int64 -> Int64)
  intrinsic shl_int64 (Int64, Int32 -> Int64)
  intrinsic rol_int64 (Int64, Int32 -> Int64)

  // Signed integer comparisons.

  intrinsic lt_int8 (Int8, Int8 -> Bool)
  intrinsic gt_int8 (Int8, Int8 -> Bool)
  intrinsic le_int8 (Int8, Int8 -> Bool)
  intrinsic ge_int8 (Int8, Int8 -> Bool)
  intrinsic eq_int8 (Int8, Int8 -> Bool)
  intrinsic ne_int8 (Int8, Int8 -> Bool)

  intrinsic lt_int16 (Int16, Int16 -> Bool)
  intrinsic gt_int16 (Int16, Int16 -> Bool)
  intrinsic le_int16 (Int16, Int16 -> Bool)
  intrinsic ge_int16 (Int16, Int16 -> Bool)
  intrinsic eq_int16 (Int16, Int16 -> Bool)
  intrinsic ne_int16 (Int16, Int16 -> Bool)

  intrinsic lt_int32 (Int32, Int32 -> Bool)
  intrinsic gt_int32 (Int32, Int32 -> Bool)
  intrinsic le_int32 (Int32, Int32 -> Bool)
  intrinsic ge_int32 (Int32, Int32 -> Bool)
  intrinsic eq_int32 (Int32, Int32 -> Bool)
  intrinsic ne_int32 (Int32, Int32 -> Bool)

  intrinsic lt_int64 (Int64, Int64 -> Bool)
  intrinsic gt_int64 (Int64, Int64 -> Bool)
  intrinsic le_int64 (Int64, Int64 -> Bool)
  intrinsic ge_int64 (Int64, Int64 -> Bool)
  intrinsic eq_int64 (Int64, Int64 -> Bool)
  intrinsic ne_int64 (Int64, Int64 -> Bool)

  // Unsigned integer arithmetic.

  intrinsic neg_uint8 (UInt8 -> UInt8)
  intrinsic add_uint8 (UInt8, UInt8 -> UInt8)
  intrinsic sub_uint8 (UInt8, UInt8 -> UInt8)
  intrinsic mul_uint8 (UInt8, UInt8 -> UInt8)
  intrinsic div_uint8 (UInt8, UInt8 -> UInt8)
  intrinsic mod_uint8 (UInt8, UInt8 -> UInt8)

  intrinsic neg_uint16 (UInt16 -> UInt16)
  intrinsic add_uint16 (UInt16, UInt16 -> UInt16)
  intrinsic sub_uint16 (UInt16, UInt16 -> UInt16)
  intrinsic mul_uint16 (UInt16, UInt16 -> UInt16)
  intrinsic div_uint16 (UInt16, UInt16 -> UInt16)
  intrinsic mod_uint16 (UInt16, UInt16 -> UInt16)

  intrinsic neg_uint32 (UInt32 -> UInt32)
  intrinsic add_uint32 (UInt32, UInt32 -> UInt32)
  intrinsic sub_uint32 (UInt32, UInt32 -> UInt32)
  intrinsic mul_uint32 (UInt32, UInt32 -> UInt32)
  intrinsic div_uint32 (UInt32, UInt32 -> UInt32)
  intrinsic mod_uint32 (UInt32, UInt32 -> UInt32)

  intrinsic neg_uint64 (UInt64 -> UInt64)
  intrinsic add_uint64 (UInt64, UInt64 -> UInt64)
  intrinsic sub_uint64 (UInt64, UInt64 -> UInt64)
  intrinsic mul_uint64 (UInt64, UInt64 -> UInt64)
  intrinsic div_uint64 (UInt64, UInt64 -> UInt64)
  intrinsic mod_uint64 (UInt64, UInt64 -> UInt64)

  // Unsigned integer bitwise operations.

  intrinsic not_uint8 (UInt8 -> UInt8)
  intrinsic or_uint8  (UInt8, UInt8 -> UInt8)
  intrinsic and_uint8 (UInt8, UInt8 -> UInt8)
  intrinsic xor_uint8 (UInt8, UInt8 -> UInt8)
  intrinsic shl_uint8 (UInt8, Int32 -> UInt8)
  intrinsic rol_uint8 (UInt8, Int32 -> UInt8)

  intrinsic not_uint16 (UInt16 -> UInt16)
  intrinsic or_uint16  (UInt16, UInt16 -> UInt16)
  intrinsic and_uint16 (UInt16, UInt16 -> UInt16)
  intrinsic xor_uint16 (UInt16, UInt16 -> UInt16)
  intrinsic shl_uint16 (UInt16, Int32 -> UInt16)
  intrinsic rol_uint16 (UInt16, Int32 -> UInt16)

  intrinsic not_uint32 (UInt32 -> UInt32)
  intrinsic or_uint32  (UInt32, UInt32 -> UInt32)
  intrinsic and_uint32 (UInt32, UInt32 -> UInt32)
  intrinsic xor_uint32 (UInt32, UInt32 -> UInt32)
  intrinsic shl_uint32 (UInt32, Int32 -> UInt32)
  intrinsic rol_uint32 (UInt32, Int32 -> UInt32)

  intrinsic not_uint64 (UInt64 -> UInt64)
  intrinsic or_uint64  (UInt64, UInt64 -> UInt64)
  intrinsic and_uint64 (UInt64, UInt64 -> UInt64)
  intrinsic xor_uint64 (UInt64, UInt64 -> UInt64)
  intrinsic shl_uint64 (UInt64, Int32 -> UInt64)
  intrinsic rol_uint64 (UInt64, Int32 -> UInt64)

  // Unsigned integer comparisons.

  intrinsic lt_uint8 (UInt8, UInt8 -> Bool)
  intrinsic gt_uint8 (UInt8, UInt8 -> Bool)
  intrinsic le_uint8 (UInt8, UInt8 -> Bool)
  intrinsic ge_uint8 (UInt8, UInt8 -> Bool)
  intrinsic eq_uint8 (UInt8, UInt8 -> Bool)
  intrinsic ne_uint8 (UInt8, UInt8 -> Bool)

  intrinsic lt_uint16 (UInt16, UInt16 -> Bool)
  intrinsic gt_uint16 (UInt16, UInt16 -> Bool)
  intrinsic le_uint16 (UInt16, UInt16 -> Bool)
  intrinsic ge_uint16 (UInt16, UInt16 -> Bool)
  intrinsic eq_uint16 (UInt16, UInt16 -> Bool)
  intrinsic ne_uint16 (UInt16, UInt16 -> Bool)

  intrinsic lt_uint32 (UInt32, UInt32 -> Bool)
  intrinsic gt_uint32 (UInt32, UInt32 -> Bool)
  intrinsic le_uint32 (UInt32, UInt32 -> Bool)
  intrinsic ge_uint32 (UInt32, UInt32 -> Bool)
  intrinsic eq_uint32 (UInt32, UInt32 -> Bool)
  intrinsic ne_uint32 (UInt32, UInt32 -> Bool)

  intrinsic lt_uint64 (UInt64, UInt64 -> Bool)
  intrinsic gt_uint64 (UInt64, UInt64 -> Bool)
  intrinsic le_uint64 (UInt64, UInt64 -> Bool)
  intrinsic ge_uint64 (UInt64, UInt64 -> Bool)
  intrinsic eq_uint64 (UInt64, UInt64 -> Bool)
  intrinsic ne_uint64 (UInt64, UInt64 -> Bool)

  intrinsic lt_char (Char, Char -> Bool)
  intrinsic gt_char (Char, Char -> Bool)
  intrinsic le_char (Char, Char -> Bool)
  intrinsic ge_char (Char, Char -> Bool)
  intrinsic eq_char (Char, Char -> Bool)
  intrinsic ne_char (Char, Char -> Bool)

  // Floating-point arithmetic.

  intrinsic neg_float32 (Float32 -> Float32)
  intrinsic add_float32 (Float32, Float32 -> Float32)
  intrinsic sub_float32 (Float32, Float32 -> Float32)
  intrinsic mul_float32 (Float32, Float32 -> Float32)
  intrinsic div_float32 (Float32, Float32 -> Float32)
  intrinsic mod_float32 (Float32, Float32 -> Float32)

  intrinsic neg_float64 (Float64 -> Float64)
  intrinsic add_float64 (Float64, Float64 -> Float64)
  intrinsic sub_float64 (Float64, Float64 -> Float64)
  intrinsic mul_float64 (Float64, Float64 -> Float64)
  intrinsic div_float64 (Float64, Float64 -> Float64)
  intrinsic mod_float64 (Float64, Float64 -> Float64)

  // Floating-point functions.

  intrinsic exp_float32 (Float32 -> Float32)
  intrinsic log_float32 (Float32 -> Float32)
  intrinsic sqrt_float32 (Float32 -> Float32)
  intrinsic sin_float32 (Float32 -> Float32)
  intrinsic cos_float32 (Float32 -> Float32)
  intrinsic tan_float32 (Float32 -> Float32)
  intrinsic asin_float32 (Float32 -> Float32)
  intrinsic acos_float32 (Float32 -> Float32)
  intrinsic atan_float32 (Float32 -> Float32)
  intrinsic atan2_float32 (Float32, Float32 -> Float32)
  intrinsic sinh_float32 (Float32 -> Float32)
  intrinsic cosh_float32 (Float32 -> Float32)
  intrinsic tanh_float32 (Float32 -> Float32)
  intrinsic asinh_float32 (Float32 -> Float32)
  intrinsic acosh_float32 (Float32 -> Float32)
  intrinsic atanh_float32 (Float32 -> Float32)
  intrinsic trunc_float32 (Float32 -> Float32)
  intrinsic round_float32 (Float32 -> Float32)
  intrinsic ceil_float32 (Float32 -> Float32)
  intrinsic floor_float32 (Float32 -> Float32)

  intrinsic exp_float64 (Float64 -> Float64)
  intrinsic log_float64 (Float64 -> Float64)
  intrinsic sqrt_float64 (Float64 -> Float64)
  intrinsic sin_float64 (Float64 -> Float64)
  intrinsic cos_float64 (Float64 -> Float64)
  intrinsic tan_float64 (Float64 -> Float64)
  intrinsic asin_float64 (Float64 -> Float64)
  intrinsic acos_float64 (Float64 -> Float64)
  intrinsic atan_float64 (Float64 -> Float64)
  intrinsic atan2_float64 (Float64, Float64 -> Float64)
  intrinsic sinh_float64 (Float64 -> Float64)
  intrinsic cosh_float64 (Float64 -> Float64)
  intrinsic tanh_float64 (Float64 -> Float64)
  intrinsic asinh_float64 (Float64 -> Float64)
  intrinsic acosh_float64 (Float64 -> Float64)
  intrinsic atanh_float64 (Float64 -> Float64)
  intrinsic trunc_float64 (Float64 -> Float64)
  intrinsic round_float64 (Float64 -> Float64)
  intrinsic ceil_float64 (Float64 -> Float64)
  intrinsic floor_float64 (Float64 -> Float64)

  // Floating-point comparisons.

  intrinsic lt_float32 (Float32, Float32 -> Bool)
  intrinsic gt_float32 (Float32, Float32 -> Bool)
  intrinsic le_float32 (Float32, Float32 -> Bool)
  intrinsic ge_float32 (Float32, Float32 -> Bool)
  intrinsic eq_float32 (Float32, Float32 -> Bool)
  intrinsic ne_float32 (Float32, Float32 -> Bool)

  intrinsic lt_float64 (Float64, Float64 -> Bool)
  intrinsic gt_float64 (Float64, Float64 -> Bool)
  intrinsic le_float64 (Float64, Float64 -> Bool)
  intrinsic ge_float64 (Float64, Float64 -> Bool)
  intrinsic eq_float64 (Float64, Float64 -> Bool)
  intrinsic ne_float64 (Float64, Float64 -> Bool)

}

trait neg[T] (T -> T)

instance neg (Int8 -> Int8) { _::mlatu::neg_int8 }
instance neg (Int16 -> Int16) { _::mlatu::neg_int16 }
instance neg (Int32 -> Int32) { _::mlatu::neg_int32 }
instance neg (Int64 -> Int64) { _::mlatu::neg_int64 }
instance neg (UInt8 -> UInt8) { _::mlatu::neg_uint8 }
instance neg (UInt16 -> UInt16) { _::mlatu::neg_uint16 }
instance neg (UInt32 -> UInt32) { _::mlatu::neg_uint32 }
instance neg (UInt64 -> UInt64) { _::mlatu::neg_uint64 }
instance neg (Float32 -> Float32) { _::mlatu::neg_float32 }
instance neg (Float64 -> Float64) { _::mlatu::neg_float64 }

trait + [T] (T, T -> T)

about +:
  docs: """
    Operation of an additive monoid with `zero` as the identity.
    """
  operator:
    left 6

instance + (Int8, Int8 -> Int8) { _::mlatu::add_int8 }
instance + (Int16, Int16 -> Int16) { _::mlatu::add_int16 }
instance + (Int32, Int32 -> Int32) { _::mlatu::add_int32 }
instance + (Int64, Int64 -> Int64) { _::mlatu::add_int64 }
instance + (UInt8, UInt8 -> UInt8) { _::mlatu::add_uint8 }
instance + (UInt16, UInt16 -> UInt16) { _::mlatu::add_uint16 }
instance + (UInt32, UInt32 -> UInt32) { _::mlatu::add_uint32 }
instance + (UInt64, UInt64 -> UInt64) { _::mlatu::add_uint64 }
instance + (Float32, Float32 -> Float32) { _::mlatu::add_float32 }
instance + (Float64, Float64 -> Float64) { _::mlatu::add_float64 }

trait zero[T] (-> T)

instance zero (-> Int8) { 0i8 }
instance zero (-> Int16) { 0i16 }
instance zero (-> Int32) { 0i32 }
instance zero (-> Int64) { 0i64 }
instance zero (-> UInt8) { 0u8 }
instance zero (-> UInt16) { 0u16 }
instance zero (-> UInt32) { 0u32 }
instance zero (-> UInt64) { 0u64 }
instance zero (-> Float32) { 0.0f32 }
instance zero (-> Float64) { 0.0f64 }

trait - [T] (T, T -> T)

about -:
  operator:
    left 6

instance - (Int8, Int8 -> Int8) { _::mlatu::sub_int8 }
instance - (Int16, Int16 -> Int16) { _::mlatu::sub_int16 }
instance - (Int32, Int32 -> Int32) { _::mlatu::sub_int32 }
instance - (Int64, Int64 -> Int64) { _::mlatu::sub_int64 }
instance - (UInt8, UInt8 -> UInt8) { _::mlatu::sub_uint8 }
instance - (UInt16, UInt16 -> UInt16) { _::mlatu::sub_uint16 }
instance - (UInt32, UInt32 -> UInt32) { _::mlatu::sub_uint32 }
instance - (UInt64, UInt64 -> UInt64) { _::mlatu::sub_uint64 }
instance - (Float32, Float32 -> Float32) { _::mlatu::sub_float32 }
instance - (Float64, Float64 -> Float64) { _::mlatu::sub_float64 }

trait * [T] (T, T -> T)

about *:
  operator:
    left 7

instance * (Int8, Int8 -> Int8) { _::mlatu::mul_int8 }
instance * (Int16, Int16 -> Int16) { _::mlatu::mul_int16 }
instance * (Int32, Int32 -> Int32) { _::mlatu::mul_int32 }
instance * (Int64, Int64 -> Int64) { _::mlatu::mul_int64 }
instance * (UInt8, UInt8 -> UInt8) { _::mlatu::mul_uint8 }
instance * (UInt16, UInt16 -> UInt16) { _::mlatu::mul_uint16 }
instance * (UInt32, UInt32 -> UInt32) { _::mlatu::mul_uint32 }
instance * (UInt64, UInt64 -> UInt64) { _::mlatu::mul_uint64 }
instance * (Float32, Float32 -> Float32) { _::mlatu::mul_float32 }
instance * (Float64, Float64 -> Float64) { _::mlatu::mul_float64 }

trait / [T] (T, T -> T +Fail)

about /:
  operator:
    left 7

instance / (Int8, Int8 -> Int8 +Fail) { _::mlatu::div_int8 }
instance / (Int16, Int16 -> Int16 +Fail) { _::mlatu::div_int16 }
instance / (Int32, Int32 -> Int32 +Fail) { _::mlatu::div_int32 }
instance / (Int64, Int64 -> Int64 +Fail) { _::mlatu::div_int64 }
instance / (UInt8, UInt8 -> UInt8 +Fail) { _::mlatu::div_uint8 }
instance / (UInt16, UInt16 -> UInt16 +Fail) { _::mlatu::div_uint16 }
instance / (UInt32, UInt32 -> UInt32 +Fail) { _::mlatu::div_uint32 }
instance / (UInt64, UInt64 -> UInt64 +Fail) { _::mlatu::div_uint64 }
instance / (Float32, Float32 -> Float32 +Fail) { _::mlatu::div_float32 }
instance / (Float64, Float64 -> Float64 +Fail) { _::mlatu::div_float64 }

trait % [T] (T, T -> T +Fail)

about %:
  operator:
    left 7

instance % (Int8, Int8 -> Int8 +Fail) { _::mlatu::mod_int8 }
instance % (Int16, Int16 -> Int16 +Fail) { _::mlatu::mod_int16 }
instance % (Int32, Int32 -> Int32 +Fail) { _::mlatu::mod_int32 }
instance % (Int64, Int64 -> Int64 +Fail) { _::mlatu::mod_int64 }
instance % (UInt8, UInt8 -> UInt8 +Fail) { _::mlatu::mod_uint8 }
instance % (UInt16, UInt16 -> UInt16 +Fail) { _::mlatu::mod_uint16 }
instance % (UInt32, UInt32 -> UInt32 +Fail) { _::mlatu::mod_uint32 }
instance % (UInt64, UInt64 -> UInt64 +Fail) { _::mlatu::mod_uint64 }
instance % (Float32, Float32 -> Float32 +Fail) { _::mlatu::mod_float32 }
instance % (Float64, Float64 -> Float64 +Fail) { _::mlatu::mod_float64 }

define div_mod[T] (T, T -> T, T +Fail):
  -> x, y;
  (x / y) (x % y)

trait << [T] (T, Int32 -> T)

about <<:
  operator:
    left 5

instance << (Int8, Int32 -> Int8) { _::mlatu::shl_int8 }
instance << (Int16, Int32 -> Int16) { _::mlatu::shl_int16 }
instance << (Int32, Int32 -> Int32) { _::mlatu::shl_int32 }
instance << (Int64, Int32 -> Int64) { _::mlatu::shl_int64 }
instance << (UInt8, Int32 -> UInt8) { _::mlatu::shl_uint8 }
instance << (UInt16, Int32 -> UInt16) { _::mlatu::shl_uint16 }
instance << (UInt32, Int32 -> UInt32) { _::mlatu::shl_uint32 }
instance << (UInt64, Int32 -> UInt64) { _::mlatu::shl_uint64 }

trait >> [T] (T, Int32 -> T)

about >>:
  operator:
    left 5

instance >> (Int8, Int32 -> Int8) { neg _::mlatu::shl_int8 }
instance >> (Int16, Int32 -> Int16) { neg _::mlatu::shl_int16 }
instance >> (Int32, Int32 -> Int32) { neg _::mlatu::shl_int32 }
instance >> (Int64, Int32 -> Int64) { neg _::mlatu::shl_int64 }
instance >> (UInt8, Int32 -> UInt8) { neg _::mlatu::shl_uint8 }
instance >> (UInt16, Int32 -> UInt16) { neg _::mlatu::shl_uint16 }
instance >> (UInt32, Int32 -> UInt32) { neg _::mlatu::shl_uint32 }
instance >> (UInt64, Int32 -> UInt64) { neg _::mlatu::shl_uint64 }

trait <<| [T] (T, Int32 -> T)

about <<|:
  operator:
    left 5

instance <<| (Int8, Int32 -> Int8) { _::mlatu::rol_int8 }
instance <<| (Int16, Int32 -> Int16) { _::mlatu::rol_int16 }
instance <<| (Int32, Int32 -> Int32) { _::mlatu::rol_int32 }
instance <<| (Int64, Int32 -> Int64) { _::mlatu::rol_int64 }
instance <<| (UInt8, Int32 -> UInt8) { _::mlatu::rol_uint8 }
instance <<| (UInt16, Int32 -> UInt16) { _::mlatu::rol_uint16 }
instance <<| (UInt32, Int32 -> UInt32) { _::mlatu::rol_uint32 }
instance <<| (UInt64, Int32 -> UInt64) { _::mlatu::rol_uint64 }

trait |>> [T] (T, Int32 -> T)

about |>>:
  operator:
    left 5

instance |>> (Int8, Int32 -> Int8) { neg _::mlatu::rol_int8 }
instance |>> (Int16, Int32 -> Int16) { neg _::mlatu::rol_int16 }
instance |>> (Int32, Int32 -> Int32) { neg _::mlatu::rol_int32 }
instance |>> (Int64, Int32 -> Int64) { neg _::mlatu::rol_int64 }
instance |>> (UInt8, Int32 -> UInt8) { neg _::mlatu::rol_uint8 }
instance |>> (UInt16, Int32 -> UInt16) { neg _::mlatu::rol_uint16 }
instance |>> (UInt32, Int32 -> UInt32) { neg _::mlatu::rol_uint32 }
instance |>> (UInt64, Int32 -> UInt64) { neg _::mlatu::rol_uint64 }

trait pi[T] (-> T)

instance pi (-> Float32) { 3.1415927f32 }
instance pi (-> Float64) { 3.141592653589793f64 }

trait exp[T] (T -> T)

instance exp (Float32 -> Float32) { _::mlatu::exp_float32 }
instance exp (Float64 -> Float64) { _::mlatu::exp_float64 }

trait log[T] (T -> T)

instance log (Float32 -> Float32) { _::mlatu::log_float32 }
instance log (Float64 -> Float64) { _::mlatu::log_float64 }

trait sqrt[T] (T -> T)

instance sqrt (Float32 -> Float32) { _::mlatu::sqrt_float32 }
instance sqrt (Float64 -> Float64) { _::mlatu::sqrt_float64 }

trait sin[T] (T -> T)

instance sin (Float32 -> Float32) { _::mlatu::sin_float32 }
instance sin (Float64 -> Float64) { _::mlatu::sin_float64 }

trait cos[T] (T -> T)

instance cos (Float32 -> Float32) { _::mlatu::cos_float32 }
instance cos (Float64 -> Float64) { _::mlatu::cos_float64 }

trait tan[T] (T -> T)

instance tan (Float32 -> Float32) { _::mlatu::tan_float32 }
instance tan (Float64 -> Float64) { _::mlatu::tan_float64 }

trait asin[T] (T -> T)

instance asin (Float32 -> Float32) { _::mlatu::asin_float32 }
instance asin (Float64 -> Float64) { _::mlatu::asin_float64 }

trait acos[T] (T -> T)

instance acos (Float32 -> Float32) { _::mlatu::acos_float32 }
instance acos (Float64 -> Float64) { _::mlatu::acos_float64 }

trait atan[T] (T -> T)

instance atan (Float32 -> Float32) { _::mlatu::atan_float32 }
instance atan (Float64 -> Float64) { _::mlatu::atan_float64 }

trait atan2[T] (T, T -> T)

instance atan2 (Float32, Float32 -> Float32) { _::mlatu::atan2_float32 }
instance atan2 (Float64, Float64 -> Float64) { _::mlatu::atan2_float64 }

trait sinh[T] (T -> T)

instance sinh (Float32 -> Float32) { _::mlatu::sinh_float32 }
instance sinh (Float64 -> Float64) { _::mlatu::sinh_float64 }

trait cosh[T] (T -> T)

instance cosh (Float32 -> Float32) { _::mlatu::cosh_float32 }
instance cosh (Float64 -> Float64) { _::mlatu::cosh_float64 }

trait tanh[T] (T -> T)

instance tanh (Float32 -> Float32) { _::mlatu::tanh_float32 }
instance tanh (Float64 -> Float64) { _::mlatu::tanh_float64 }

trait asinh[T] (T -> T)

instance asinh (Float32 -> Float32) { _::mlatu::asinh_float32 }
instance asinh (Float64 -> Float64) { _::mlatu::asinh_float64 }

trait acosh[T] (T -> T)

instance acosh (Float32 -> Float32) { _::mlatu::acosh_float32 }
instance acosh (Float64 -> Float64) { _::mlatu::acosh_float64 }

trait atanh[T] (T -> T)

instance atanh (Float32 -> Float32) { _::mlatu::atanh_float32 }
instance atanh (Float64 -> Float64) { _::mlatu::atanh_float64 }

trait trunc[T] (T -> T)
instance trunc (Float32 -> Float32) { _::mlatu::trunc_float32 }
instance trunc (Float64 -> Float64) { _::mlatu::trunc_float64 }

trait round[T] (T -> T)
instance round (Float32 -> Float32) { _::mlatu::round_float32 }
instance round (Float64 -> Float64) { _::mlatu::round_float64 }

trait ceil[T] (T -> T)
instance ceil (Float32 -> Float32) { _::mlatu::ceil_float32 }
instance ceil (Float64 -> Float64) { _::mlatu::ceil_float64 }

trait floor[T] (T -> T)
instance floor (Float32 -> Float32) { _::mlatu::floor_float32 }
instance floor (Float64 -> Float64) { _::mlatu::floor_float64 }

trait < [T] (T, T -> Bool)

about <:
  operator:
    4

trait > [T] (T, T -> Bool)

about >:
  operator:
    4

trait <= [T] (T, T -> Bool)

about <=:
  operator:
    4

trait >= [T] (T, T -> Bool)

about >=:
  operator:
    4

trait = [T] (T, T -> Bool)

about =:
  operator:
    4

trait <> [T] (T, T -> Bool)

about <>:
  operator:
    4

instance < (Int8, Int8 -> Bool) { _::mlatu::lt_int8 }
instance > (Int8, Int8 -> Bool) { _::mlatu::gt_int8 }
instance <= (Int8, Int8 -> Bool) { _::mlatu::le_int8 }
instance >= (Int8, Int8 -> Bool) { _::mlatu::ge_int8 }
instance = (Int8, Int8 -> Bool) { _::mlatu::eq_int8 }
instance <> (Int8, Int8 -> Bool) { _::mlatu::ne_int8 }

instance < (Int16, Int16 -> Bool) { _::mlatu::lt_int16 }
instance > (Int16, Int16 -> Bool) { _::mlatu::gt_int16 }
instance <= (Int16, Int16 -> Bool) { _::mlatu::le_int16 }
instance >= (Int16, Int16 -> Bool) { _::mlatu::ge_int16 }
instance = (Int16, Int16 -> Bool) { _::mlatu::eq_int16 }
instance <> (Int16, Int16 -> Bool) { _::mlatu::ne_int16 }

instance < (Int32, Int32 -> Bool) { _::mlatu::lt_int32 }
instance > (Int32, Int32 -> Bool) { _::mlatu::gt_int32 }
instance <= (Int32, Int32 -> Bool) { _::mlatu::le_int32 }
instance >= (Int32, Int32 -> Bool) { _::mlatu::ge_int32 }
instance = (Int32, Int32 -> Bool) { _::mlatu::eq_int32 }
instance <> (Int32, Int32 -> Bool) { _::mlatu::ne_int32 }

instance < (Int64, Int64 -> Bool) { _::mlatu::lt_int64 }
instance > (Int64, Int64 -> Bool) { _::mlatu::gt_int64 }
instance <= (Int64, Int64 -> Bool) { _::mlatu::le_int64 }
instance >= (Int64, Int64 -> Bool) { _::mlatu::ge_int64 }
instance = (Int64, Int64 -> Bool) { _::mlatu::eq_int64 }
instance <> (Int64, Int64 -> Bool) { _::mlatu::ne_int64 }

instance < (UInt8, UInt8 -> Bool) { _::mlatu::lt_uint8 }
instance > (UInt8, UInt8 -> Bool) { _::mlatu::gt_uint8 }
instance <= (UInt8, UInt8 -> Bool) { _::mlatu::le_uint8 }
instance >= (UInt8, UInt8 -> Bool) { _::mlatu::ge_uint8 }
instance = (UInt8, UInt8 -> Bool) { _::mlatu::eq_uint8 }
instance <> (UInt8, UInt8 -> Bool) { _::mlatu::ne_uint8 }

instance < (UInt16, UInt16 -> Bool) { _::mlatu::lt_uint16 }
instance > (UInt16, UInt16 -> Bool) { _::mlatu::gt_uint16 }
instance <= (UInt16, UInt16 -> Bool) { _::mlatu::le_uint16 }
instance >= (UInt16, UInt16 -> Bool) { _::mlatu::ge_uint16 }
instance = (UInt16, UInt16 -> Bool) { _::mlatu::eq_uint16 }
instance <> (UInt16, UInt16 -> Bool) { _::mlatu::ne_uint16 }

instance < (UInt32, UInt32 -> Bool) { _::mlatu::lt_uint32 }
instance > (UInt32, UInt32 -> Bool) { _::mlatu::gt_uint32 }
instance <= (UInt32, UInt32 -> Bool) { _::mlatu::le_uint32 }
instance >= (UInt32, UInt32 -> Bool) { _::mlatu::ge_uint32 }
instance = (UInt32, UInt32 -> Bool) { _::mlatu::eq_uint32 }
instance <> (UInt32, UInt32 -> Bool) { _::mlatu::ne_uint32 }

instance < (UInt64, UInt64 -> Bool) { _::mlatu::lt_uint64 }
instance > (UInt64, UInt64 -> Bool) { _::mlatu::gt_uint64 }
instance <= (UInt64, UInt64 -> Bool) { _::mlatu::le_uint64 }
instance >= (UInt64, UInt64 -> Bool) { _::mlatu::ge_uint64 }
instance = (UInt64, UInt64 -> Bool) { _::mlatu::eq_uint64 }
instance <> (UInt64, UInt64 -> Bool) { _::mlatu::ne_uint64 }

instance < (Char, Char -> Bool) { _::mlatu::lt_char }
instance > (Char, Char -> Bool) { _::mlatu::gt_char }
instance <= (Char, Char -> Bool) { _::mlatu::le_char }
instance >= (Char, Char -> Bool) { _::mlatu::ge_char }
instance = (Char, Char -> Bool) { _::mlatu::eq_char }
instance <> (Char, Char -> Bool) { _::mlatu::ne_char }

instance < (Float32, Float32 -> Bool) { _::mlatu::lt_float32 }
instance > (Float32, Float32 -> Bool) { _::mlatu::gt_float32 }
instance <= (Float32, Float32 -> Bool) { _::mlatu::le_float32 }
instance >= (Float32, Float32 -> Bool) { _::mlatu::ge_float32 }
instance = (Float32, Float32 -> Bool) { _::mlatu::eq_float32 }
instance <> (Float32, Float32 -> Bool) { _::mlatu::ne_float32 }

instance < (Float64, Float64 -> Bool) { _::mlatu::lt_float64 }
instance > (Float64, Float64 -> Bool) { _::mlatu::gt_float64 }
instance <= (Float64, Float64 -> Bool) { _::mlatu::le_float64 }
instance >= (Float64, Float64 -> Bool) { _::mlatu::ge_float64 }
instance = (Float64, Float64 -> Bool) { _::mlatu::eq_float64 }
instance <> (Float64, Float64 -> Bool) { _::mlatu::ne_float64 }

instance < (Bool, Bool -> Bool) { -> a, b; a not & b }
instance > (Bool, Bool -> Bool) { -> a, b; a & b not }
instance <= (Bool, Bool -> Bool) { (>) not }
instance >= (Bool, Bool -> Bool) { (<) not }
instance = (Bool, Bool -> Bool) { if {} else {not} }
instance <> (Bool, Bool -> Bool) { (=) not }


define abs[T] (T -> T):
  dup
  if ((< zero)):
    neg

// FIXME: Requires casting.
//
// define even[T] (T -> Bool):
//   (% 2) (= 0)
//
// define odd[T] (T -> Bool):
//   (% 2) (<> 0)

define max[T] (T, T -> T):
  -> a, b;
  if (a < b):
    b
  else:
    a

define min[T] (T, T -> T):
  -> a, b;
  if (a < b):
    a
  else:
    b

